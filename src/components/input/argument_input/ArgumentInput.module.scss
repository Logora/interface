@use '~@logora/debate.styles.theme/_theme.scss' as theme;
@use '~@logora/debate.styles.spacing/_spacing.scss' as spacing;
@use "~@logora/debate.styles.flex/_flex.scss" as flex;
@use '~@logora/debate.styles.display/_display.scss' as display;

.inputContainer {
    position: relative;
}

.argumentInput {
    width: 100%;
    @include spacing.p(4, sm);
    @include spacing.p(3, xs);
    background-color: theme.$background-color-primary;
    box-shadow: theme.$box-shadow;
    border: theme.$box-border;
    border-radius: theme.$box-border-radius;
    z-index: 1;
    -webkit-transition: box-shadow 0.8s ease-in-out;
    -moz-transition: box-shadow 0.8s ease-in-out;
    -o-transition: box-shadow 0.8s ease-in-out;
    transition: box-shadow 0.8s ease-in-out;

    &:hover, &:focus-within {
        box-shadow: 0 0 5px theme.$darkest-text-tertiary;
    }

    &.flash, &.flash:hover, &.flash:focus-within {
        box-shadow: 0 0 15px theme.$call-primary;
    }
}

.argumentInputBox {
    display: flex !important;
    flex-direction: column !important;
    justify-content: center !important;
    gap: spacing.$spacer-xs;
}

.userPosition {
    display: flex !important;
    flex-flow: row wrap;
    align-items: center;
    gap: spacing.$spacer;
    color: theme.$text-primary;
    width: fit-content;
}

.argumentTextInputBox {
    display: flex !important;
    flex-direction: column !important;
    align-items: flex-start !important;
    gap: spacing.$spacer-lg;
    &.argumentTextInputBoxisTablet {
        flex-direction: row !important;
    }
    @include display.media-breakpoint-down(xs) {
        gap: spacing.$spacer-xs;
    }
}

.argumentAuthorContainer {
    @include spacing.mt(2, xs);
    overflow: hidden;
    min-width: 175px;
    max-width: 230px;
    &.argumentAuthorContainerActivated {
        min-width: initial;
        max-width: initial;
        overflow: initial;
    }
}

.argumentAuthorContainerMobile {
    width: max-content;
    max-width: initial;
}

.textEditorBox {
    width: 100%;
    @include spacing.pt(2, sm);
    @include spacing.pt(0, xs);
}

.argumentInputWarning {
    font-size: theme.$font-size-extra-small;
    color: theme.$cancel-primary;
    @include spacing.mt(3, xs);
    svg.warningIcon {
        fill: transparent !important;
        min-width: 20px;
        min-height: 20px;
        circle {
            stroke: theme.$cancel-primary;
            stroke-width: 1.5px;
        }
        path {
            fill: theme.$cancel-primary;
        }
    }
    &.disabledPositionWarning {
        display: flex !important;
        align-items: center !important;
        gap: spacing.$spacer-sm;
    }
}

.disabledInputMask {
    position: absolute;
    width: 100%;
    height: 100%;
    z-index: 2;
    opacity: 0.9;
    background: theme.$text-tertiary;
    display: flex;
    flex-direction: row;
    justify-content: center;
    align-items: center;
    font-style: italic;
}

.replyInputContainer {
    transition: margin-top 2s;
    position: relative;

    background-color: theme.$background-color-primary;
    border-radius: theme.$box-border-radius;
    box-shadow: theme.$box-shadow;
    border: theme.$box-border;
    
    @include spacing.mt(2, xs);
    @include spacing.p(3, xs);

    &::before {
        content: "";
        border-left: 4px solid theme.$text-secondary;
        position: absolute;
        width: 4px;
        height: 10px;
        top: -10px;
        left: 4em;
    }
}

.replyEditorRow {
    display: flex !important;
    flex-direction: row !important;
    justify-content: flex-start !important;
    align-items: flex-start !important;
    gap: spacing.$spacer !important;
    width: 100%;
}

.replyTextEditorBox {
    @include spacing.pt(0, xs);
}

.guideMessage {
    font-size: theme.$font-size-small;
    color: theme.$text-secondary;
    white-space: nowrap;
    margin-top: 1rem; 
    white-space: normal; 
    word-break: break-word; 
    a {
        font-size: theme.$font-size-small;
        color: theme.$announcement-text-primary !important;
        text-decoration: underline !important;
    }
}